map "http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureMap/at-cda-to-bundle" = "CdaToBundle"

//
// Mapping CDA2FHIR
//

conceptmap "cda-code-2-fhir-category" {
  prefix s = "http://loinc.org"
  prefix t = "http://loinc.org"

  s:"11502-2" == t:"26436-6"
  s:"18725-2" == t:"18725-2"
  // for TME document codes
  s:"75498-6" == t:"75498-6" 
  s:"75496-0" == t:"75496-0"
}

conceptmap "cda-sdtc-statuscode-2-fhir-composition-status" {
  prefix s = "http://hl7.org/fhir/ValueSet/composition-status"
  prefix t = "http://hl7.org/fhir/ValueSet/composition-status"

  s:"active" == t:"preliminary"
  s:"nullified" == t:"entered-in-error"
}

conceptmap "cm-v3-administrative-gender" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:M == t:male
  s:F == t:female
}

// TODO review mapping
// TODO deal with nullFlavor
conceptmap "ELGAAdministrativeGenderFHIRGender" {
  prefix s = "https://termgit.elga.gv.at/ValueSet-elga-administrativegender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:"F" == t: "female"
  s:"M" == t:"male"
  s:"UN" == t: "other"
}

conceptmap "act-status-2-observation-status" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-ActStatus"
  prefix t = "http://hl7.org/fhir/ValueSet/observation-status"

  s:"completed" == t:"final"
  s:"active" == t:"preliminary"
  s:"aborted" == t:"cancelled"
}

uses "http://hl7.org/cda/stds/core/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Author" alias Author as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssignedAuthor" alias AssignedAuthor as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssignedEntity" alias AssignedEntity as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssociatedEntity" alias AssociatedEntity as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/CustodianOrganization" alias CustodianOrganization as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Section" alias Section as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/PatientRole" alias PatientRole as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/StructuredBody" alias StructuredBody as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Observation" alias CDAObservation as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Performer2" alias Performer as source
uses "http://hl7.org/fhir/4.3/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Composition" alias Composition as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Patient" alias Patient as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Person" alias Person as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Practitioner" alias Practitioner as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/PractitionerRole" alias PractitionerRole as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Organization" alias Organization as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/DiagnosticReport" alias DiagnosticReport as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/ServiceRequest" alias ServiceRequest as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Observation" alias Observation as target

imports "http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureMap/at-cda-to-fhir-types"


// _________________________ Document Level Template  _________________________

group CdaToFhirBundle(source cda : ClinicalDocument, target fhir_bundle : Bundle) {
  cda ->
    fhir_bundle.id = uuid(),
    fhir_bundle.type = 'document',
    fhir_bundle.meta as fhir_bundle_meta,
    fhir_bundle_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/Bundle-eu-lab'
    "FhirBundleMetadata";
  // ClinicalDocument.id
  cda.id -> fhir_bundle.identifier "identifier";
  // ClinicalDocument.effectiveTime
  cda.effectiveTime -> fhir_bundle.timestamp;

  cda ->
    // create the composition to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_1,
    fhir_bundle_entry_1.resource = create('Composition') as fhir_composition,
    fhir_composition.id = uuid() as fhir_composition_uuid,
    fhir_bundle_entry_1.fullUrl = append('urn:uuid:', fhir_composition_uuid),

    // create the DiagnosticReport to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_4,
    fhir_bundle_entry_4.resource = create('DiagnosticReport') as fhir_diagnosticReport,
    fhir_diagnosticReport.id = uuid() as fhir_diagnosticReport_id,
    fhir_bundle_entry_4.fullUrl = append('urn:uuid:', fhir_diagnosticReport_id),

    // create the patient to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_2,
    fhir_bundle_entry_2.resource = create('Patient') as fhir_patient,
    fhir_patient.id = uuid() as fhir_patient_uuid,
    fhir_bundle_entry_2.fullUrl = append('urn:uuid:', fhir_patient_uuid),

    // create the ServiceRequest to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_5,
    fhir_bundle_entry_5.resource = create('ServiceRequest') as fhir_serviceRequest,
    fhir_serviceRequest.id = uuid() as fhir_serviceRequest_id,
    fhir_bundle_entry_5.fullUrl = append('urn:uuid:', fhir_serviceRequest_id),
    fhir_serviceRequest.meta as fhir_serviceRequest_meta,
    fhir_serviceRequest_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/ServiceRequest-eu-lab',

    // create relation from Composition to ServiceRequest
    fhir_composition.extension as fhir_composition_extenstion_01,
    fhir_composition_extenstion_01.url = 'http://hl7.eu/fhir/StructureDefinition/composition-basedOn-order-or-requisition',
    fhir_composition_extenstion_01.value = create('Reference') as fhir_diagnosticReport_composition_reference,
    fhir_diagnosticReport_composition_reference.reference = append('urn:uuid:', fhir_serviceRequest_id),
    fhir_diagnosticReport_composition_reference.type = 'ServiceRequest',

    // create relation from Composition to Patient
    fhir_composition.subject = create('Reference') as fhir_composition_subject_reference,
    fhir_composition_subject_reference.reference = append('urn:uuid:', fhir_patient_uuid),
    fhir_composition_subject_reference.type = 'Patient',

    // create relation from Composition to DiagnosticReport
    fhir_composition.extension as fhir_composition_extenstion_02,
    fhir_composition_extenstion_02.url = 'http://hl7.eu/fhir/laboratory/StructureDefinition/composition-diagnosticReportReference',
    fhir_composition_extenstion_02.value = create('Reference') as fhir_composition_diagnosticReport_reference,
    fhir_composition_diagnosticReport_reference.reference = append('urn:uuid:', fhir_diagnosticReport_id),
    fhir_composition_diagnosticReport_reference.type = 'DiagnosticReport',

    // create relation from DiagnosticReport to Composition
    fhir_diagnosticReport.extension as fhir_diagnosticReport_extension,
    fhir_diagnosticReport_extension.url = 'http://hl7.org/fhir/5.0/StructureDefinition/extension-DiagnosticReport.composition',
    fhir_diagnosticReport_extension.value = create('Reference') as fhir_diagnosticReport_composition_reference,
    fhir_diagnosticReport_composition_reference.reference = append('urn:uuid:', fhir_composition_uuid),
    fhir_diagnosticReport_composition_reference.type = 'Composition',

    // create relation from DiagnosticReport to ServiceRequest
    fhir_diagnosticReport.basedOn = create('Reference') as fhir_diagnosticReport_basedOn_reference,
    fhir_diagnosticReport_basedOn_reference.reference = append('urn:uuid:', fhir_serviceRequest_id),
    fhir_diagnosticReport_basedOn_reference.type = 'ServiceRequest',

    // create relation from DiagnosticReport to Patient
    fhir_diagnosticReport.subject = create('Reference') as fhir_diagnosticReport_subject_reference,
    fhir_diagnosticReport_subject_reference.reference = append('urn:uuid:', fhir_patient_uuid),
    fhir_diagnosticReport_subject_reference.type = 'Patient',

    // create relation from ServiceRequest to Patient
    fhir_serviceRequest.subject = create('Reference') as fhir_serviceRequest_subject_reference,
    fhir_serviceRequest_subject_reference.reference = append('urn:uuid:', fhir_patient_uuid),
    fhir_serviceRequest_subject_reference.type = 'Patient',

    // PractitionerRole
    fhir_bundle.entry as fhir_bundle_entry01,
    fhir_bundle_entry01.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry01.fullUrl = append('urn:uuid:', fhir_practitionerRole_id)

    then {
      cda then CdaHeaderToFhirComposition(cda, fhir_composition, fhir_patient, fhir_diagnosticReport, fhir_serviceRequest, fhir_bundle) "CdaHeaderToFhirComposition";
      cda then CdaHeaderToFhirDiagnosticReport(cda, fhir_diagnosticReport) "CdaHeaderToFhirDiagnosticReport";
      // ClinicalDocument.component
      cda.component as cda_component then {
        // ClinicalDocument.component.structuredBody
        cda_component.structuredBody as cda_structuredBody
          then CdaToPractitionerRole(cda, fhir_practitionerRole, fhir_bundle),
               CdaBodyToFhirComposition(cda, cda_structuredBody, fhir_composition, fhir_practitionerRole, fhir_patient, fhir_diagnosticReport, fhir_bundle);
      };
      // cda.component as component then {
      //   component.structuredBody as structuredBody then {
      //     structuredBody.component as component log 'component' then {
      //       // component.section as srcSection where $this.code.empty() -> composition.section as tgtSection then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle);
      //     } "component";
      //   } "body";
      // } "component";
    }

    "CdaToFhirBundle";
}

// _________________________ Header Level Templates _________________________

group CdaHeaderToFhirComposition(source cda : ClinicalDocument, target fhir_composition : Composition, target fhir_patient: Patient, target fhir_diagnosticReport: DiagnosticReport, target fhir_serviceRequest: ServiceRequest, target fhir_bundle : Bundle) {
  cda -> fhir_composition.meta as fhir_composition_meta,
    fhir_composition_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/Composition-eu-lab'
    "FhirCompositionProfile";

  // ClinicalDocument.code
  cda.code as cda_code then {
    cda_code.code as code_code ->
    fhir_composition.category as fhir_composition_category,
    fhir_composition_category.coding = translate(code_code, '#cda-code-2-fhir-category' , 'Coding') "code";
  };

  // ClinicalDocument.code.translation
  cda.code as cda_code then {
    cda_code.translation -> fhir_composition.type;
    cda_code where cda_code.translation.exists().not() ->
      fhir_composition.type = create('CodeableConcept') as type_coding,
      type_coding.coding = create('Coding') as coding_coding,
      coding_coding.system = 'http://loinc.org',
      coding_coding.code = '11502-2'
      "CdaMissingCodeTranslationToFhirCompositionType";
  };
  // ClinicalDocument.title
  cda.title as cda_title -> fhir_composition.title = (cda_title.xmlText);
  // ClinicalDocument.sdtc:statusCode
  // TODO clarify mapping
  cda.sdtcStatusCode as cda_statusCode where cda.sdtcStatusCode.exists() then {
    cda_statusCode.code as cda_code -> fhir_composition.status = translate(cda_code, '#cda-sdtc-statuscode-2-fhir-composition-status' , 'code');
  } "CdaStatusCodeToFhirCompositionStatusMapped";
  cda where cda.sdtcStatusCode.exists().not() -> fhir_composition.status = 'final' "CdaStatusCodeToFhirCompositionStatusFixed";
  // TODO ClinicalDocument.hl7at:terminologyDate
  // cda.terminologyDate ->
  // TODO ClinicalDocument.hl7at:formatCode
  // cda.formatCode ->
  // TODO ClinicalDocument.hl7at:practiceSettingCode
  // cda.practiceSettingCode ->
  // ClinicalDocument.effectiveTime
  cda.effectiveTime -> fhir_composition.date;
  // ClinicalDocument.confidentialityCode
  cda.confidentialityCode -> fhir_composition.confidentiality; // no code conversion needed
  // ClinicalDocument.languageCode
  cda.languageCode -> fhir_composition.language;
  // ClinicalDocument.setId
  cda.setId -> fhir_composition.identifier;
  // ClinicalDocument.versionNumber
  cda.versionNumber as cda_versionNumber then {
    cda_versionNumber.value as cda_versionNumber_value ->
      fhir_composition.extension as fhir_composition_extenstion,
      fhir_composition_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/composition-clinicaldocument-versionNumber',
      fhir_composition_extenstion.value = cast(cda_versionNumber_value, 'string')
      "CdaVersionNumberToFhirVersionNumber";
  };

  // ClinicalDocument.recordTarget
  cda.recordTarget as cda_recordTarget then {
    // ClinicalDocument.recordTarget.patientRole
    cda_recordTarget.patientRole as cda_patientRole then CdaPatientRoleToFhirPatient(cda_patientRole, fhir_patient, fhir_bundle) "CdaPatientRoleToFhirPatient";
  } "CdaRecordTargetToFhirPatient";

  // ClinicalDocument.author (as person)
  cda.author as cda_author where $this.assignedAuthor.assignedPerson.exists() ->
    // create the PractitionerRole in order to capture the author.functionCode
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_composition.author = create('Reference') as fhir_composition_author_reference,
    fhir_composition_author_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_composition_author_reference.type = 'PractitionerRole' then
    CdaAuthorToFhirPractitionerRole(cda_author, fhir_practitionerRole, fhir_bundle);

  // ClinicalDocument.author (as device)
  cda.author as cda_author where $this.assignedAuthor.assignedAuthoringDevice.exists() ->
    // create the Device
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('Device') as fhir_device,
    fhir_device.id = uuid() as fhir_device_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_device_id),
    fhir_composition.author = create('Reference') as fhir_composition_author_reference,
    fhir_composition_author_reference.reference = append('urn:uuid:', fhir_device_id),
    fhir_composition_author_reference.type = 'Device' then
    CdaAuthorToFhirDevice(cda_author, fhir_device, fhir_bundle);

  // ClinicalDocument.dataEnterer
  // TODO based on analysis of sample reports currently not required

  // ClinicalDocument.custodian
  cda.custodian as cda_custodian then {
    // ClinicalDocument.custodian.assignedCustodian
    cda_custodian.assignedCustodian as cda_assignedCustodian then {
      // ClinicalDocument.custodian.assignedCustodian.representedCustodianOrganization
      cda_assignedCustodian.representedCustodianOrganization as cda_representedCustodianOrganization ->
        // create the Organization
        fhir_bundle.entry as fhir_bundle_entry,
        fhir_bundle_entry.resource = create('Organization') as fhir_custodian_organization,
        fhir_custodian_organization.id = uuid() as fhir_custodian_organization_id,
        fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_custodian_organization_id),
        fhir_composition.custodian = create('Reference') as fhir_composition_custodian_reference,
        fhir_composition_custodian_reference.reference = append('urn:uuid:', fhir_custodian_organization_id),
        fhir_composition_custodian_reference.type = 'Organization' then {
          // ClinicalDocument.custodian.assignedCustodian.representedCustodianOrganization.id
          cda_representedCustodianOrganization.id -> fhir_custodian_organization.identifier;
          // ClinicalDocument.custodian.assignedCustodian.representedCustodianOrganization.name
          cda_representedCustodianOrganization.name -> fhir_custodian_organization.name;
          // ClinicalDocument.custodian.assignedCustodian.representedCustodianOrganization.telecom
          cda_representedCustodianOrganization.telecom -> fhir_custodian_organization.telecom;
          // ClinicalDocument.custodian.assignedCustodian.representedCustodianOrganization.addr
          // cda_representedCustodianOrganization.addr as cda_custodian_addr ->
          //   fhir_custodian_organization.address = create('Address') as fhir_custodian_address then
          //   CdaAdressCompilationToFhirAustrianAddress(cda_custodian_addr, fhir_custodian_address)
          //   "CdaCustodianAddressToFhirCustodianAustrianAddress";
          cda_representedCustodianOrganization.addr -> fhir_custodian_organization.address;
        };
    };
  };

  // ClinicalDocument.informationRecipient
  // TODO based on analysis of sample reports currently not required

  // ClinicalDocument.legalAuthenticator
  cda.legalAuthenticator as cda_legalAuthenticator ->
    fhir_composition.attester as fhir_composition_attester then {
      // ClinicalDocument.legalAuthenticator.time
      cda_legalAuthenticator.time -> fhir_composition_attester.time;
      // ClinicalDocument.legalAuthenticator.signatureCode
      // in CDA constantly 'S' -> in FHIR 'legal'
      cda_legalAuthenticator.signatureCode -> fhir_composition_attester.mode as fhir_composition_attester_mode, 
        fhir_composition_attester_mode.code = 'legal' "CdaLegalAuthenticatorSignatureCodeToFhirCompositionAttesterMode";
      // ClinicalDocument.legalAuthenticator.assignedEntity
      cda_legalAuthenticator.assignedEntity as cda_legalAuthenticator_assignedEntity ->
        // Create a PractitionerRole
        fhir_bundle.entry as fhir_bundle_entry01,
        fhir_bundle_entry01.resource = create('PractitionerRole') as fhir_practitionerRole,
        fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
        fhir_bundle_entry01.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
        fhir_composition_attester.party = create('Reference') as fhir_composition_attester_reference,
        fhir_composition_attester_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
        fhir_composition_attester_reference.type = 'PractitionerRole'
        then CdaAssignedEntityToFhirPractitionerRole(cda_legalAuthenticator_assignedEntity, fhir_practitionerRole, fhir_bundle);
  };

  // ClinicalDocument.authenticator
  // TODO based on analysis of sample reports currently not required

  // Participant Auftraggeber / Ordering Provider
  // ClinicalDocument.participant[@typeCode='REF']
  cda.participant as cda_orderingProvider where $this.typeCode='REF' ->
    // Create a PractitionerRole
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_serviceRequest.requester = create('Reference') as fhir_serviceRequest_requester_reference,
    fhir_serviceRequest_requester_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_serviceRequest_requester_reference.type = 'PractitionerRole' then {
      // ClinicalDocument.participant[@typeCode='REF'].time
      cda_orderingProvider.time as cda_orderingProvider_time then {
        cda_orderingProvider_time.value as v -> fhir_serviceRequest.authoredOn = cast(v, 'string');
      };
      // ClinicalDocument.participant[@typeCode='REF'].associatedEntity
      cda_orderingProvider.associatedEntity as cda_associatedEntity then CdaAssociatedEntityToFhirPractitionerRole(cda_associatedEntity, fhir_practitionerRole, fhir_bundle);
  } "CdaOrderingProviderToFhirServiceRequestRequester";

  // Participant Fachlicher Ansprechpartner
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.20']]
  // TODO extension required

  // Participant Hausarzt
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.23']]
  // TODO based on analysis of sample reports currently not required

  // Participant Auskunftsberechtigte Person (Notfallkontakt)
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.27']]
  // TODO based on analysis of sample reports currently not required

  // Participant Angehoerige
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.25']] or 1.2.40.0.34.11.1.1.5
  // TODO

  // Participant Versicherung
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.26']]
  // TODO extension required

  // Participant Betreuungsorganisation
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.29']]
  // TODO based on analysis of sample reports currently not required

  // Participant Weitere Behandler
  // ClinicalDocument.participant[hl7:templateId [@root='1.2.40.0.34.6.0.11.1.28']]
  // TODO based on analysis of sample reports currently not required

  // ClinicalDocument.inFulfillmentOf
  cda.inFulfillmentOf as cda_inFulFillmentOf then {
    // ClinicalDocument.inFulfillmentOf.order
    cda_inFulFillmentOf.order as cda_inFulFillmentOf_order then {
      // ClinicalDocument.inFulfillmentOf.order.id
      cda_inFulFillmentOf_order.id -> fhir_serviceRequest.identifier;
      // fhir_serviceRequest.status
      // TODO if a laboratory report is a preliminary report the status of the servicerequest should be "active"
      cda -> fhir_serviceRequest.status = 'completed' "FhirServiceRequestStatus";
      // fhir_serviceRequest.intent
      cda -> fhir_serviceRequest.intent = 'order' "FhirServiceRequestIntent";
    };
  };

  // ClinicalDocument.documentationOf
  cda.documentationOf as cda_documentationOf then {
    // ClinicalDocument.documentationOf.serviceEvent
    cda_documentationOf.serviceEvent as cda_documentationOf_serviceEvent ->
      fhir_composition.event as fhir_composition_event then {
      // ClinicalDocument.documentationOf.serviceEvent.id
      cda_documentationOf_serviceEvent.id as serviceEvent_id then {
        serviceEvent_id.root as serviceEvent_id_root ->
          fhir_composition_event.code as event_codeableConcept,
          // constant string in order to highlight the serviceEvent.id
          event_codeableConcept.text = 'serviceEvent-id',
          event_codeableConcept.coding as event_codeableConcept_coding,
          // ClinicalDocument.documentationOf.serviceEvent.id.root
          event_codeableConcept_coding.code = serviceEvent_id_root
          "CdaServiceEventIdToFhirEventCode";
      };
      // ClinicalDocument.documentationOf.serviceEvent.code
      cda_documentationOf_serviceEvent.code -> fhir_composition_event.code;
      // ClinicalDocument.documentationOf.serviceEvent.effectiveTime
      cda_documentationOf_serviceEvent.effectiveTime -> fhir_composition_event.period;
      // ClinicalDocument.documentationOf.serviceEvent.performer
      // TODO based on analysis of sample reports currently not required
    };
  };

  // ClinicalDocument.relatedDocument
  cda.relatedDocument as cda_relatedDocument then {
    // ClinicalDocument.relatedDocument.parentDocument
    cda_relatedDocument.parentDocument as cda_parentDocument ->
      fhir_composition.relatesTo as fhir_composition_relatesTo then {
        // ClinicalDocument.relatedDocument.typeCode
        // in Laboratory this is constrained to RPLC -> replaces
        cda_relatedDocument.typeCode -> fhir_composition_relatesTo.code = 'replaces' "CdaParentDocumentTypeCodeToFhirRelatesToCode";
        //  ClinicalDocument.relatedDocument.parentDocument.id
        cda_parentDocument.id as cda_parentDocument_id ->
          fhir_composition_relatesTo.target = create('Identifier') as fhir_target_identifier
          then II(cda_parentDocument_id, fhir_target_identifier);
      };
  };

  // ClinicalDocument.componentOf
  cda.componentOf as cda_componentOf then {
    // ClinicalDocument.componentOf.encompassingEncounter
    cda_componentOf.encompassingEncounter as cda_encompassingEncounter ->
      fhir_bundle.entry as fhir_bundle_entry,
      fhir_bundle_entry.resource = create('Encounter') as fhir_encounter,
      fhir_encounter.id = uuid() as fhir_encounter_id,
      fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_encounter_id),
      // create reference between composition and encounter
      fhir_composition.encounter = create('Reference') as fhir_composition_encounter_reference,
      fhir_composition_encounter_reference.reference = append('urn:uuid:', fhir_encounter_id),
      fhir_composition_encounter_reference.type = 'Encounter',

      // create reference between diagnosticReport and encounter
      fhir_diagnosticReport.encounter = create('Reference') as fhir_diagnosticReport_encounter_reference,
      fhir_diagnosticReport_encounter_reference.reference = append('urn:uuid:', fhir_encounter_id),
      fhir_diagnosticReport_encounter_reference.type = 'Encounter'
      then CdaEncompassingEncounterToFhirEncounter(cda_encompassingEncounter, fhir_encounter, fhir_bundle);
  };
}

group CdaHeaderToFhirDiagnosticReport(source cda : ClinicalDocument, target fhir_diagnosticReport: DiagnosticReport) {
  cda -> fhir_diagnosticReport.meta as fhir_diagnosticReport_meta,
    fhir_diagnosticReport_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/DiagnosticReport-eu-lab'
    "FhirDiagnosticReportProfile";

  // ClinicalDocument.code
  cda.code as cda_code then {
    cda_code.code as code_code ->
    fhir_diagnosticReport.category as fhir_diagnosticReport_category,
    fhir_diagnosticReport_category.coding = translate(code_code, '#cda-code-2-fhir-category' , 'Coding') "code";
  };

  // ClinicalDocument.code.translation
  cda.code as cda_code then {
    cda_code.translation -> fhir_diagnosticReport.code;
    cda_code where cda_code.translation.exists().not() ->
      fhir_diagnosticReport.code = create('CodeableConcept') as code_coding,
      code_coding.coding = create('Coding') as coding_coding,
      coding_coding.system = 'http://loinc.org',
      coding_coding.code = '11502-2'
      "CdaMissingCodeTranslationToFhirCompositionType";
  };

  // ClinicalDocument.title
  // see Composition

  // ClinicalDocument.sdtc:statusCode
  // TODO clarify mapping
  cda.sdtcStatusCode as cda_statusCode where cda.sdtcStatusCode.exists() then {
    cda_statusCode.code as cda_code -> fhir_diagnosticReport.status = translate(cda_code, '#cda-sdtc-statuscode-2-fhir-composition-status' , 'code');
  } "CdaStatusCodeToFhirCompositionStatusMapped";
  cda where cda.sdtcStatusCode.exists().not() -> fhir_diagnosticReport.status = 'final' "CdaStatusCodeToFhirCompositionStatusFixed";
  // TODO ClinicalDocument.hl7at:terminologyDate
  // cda.terminologyDate ->
  // TODO ClinicalDocument.hl7at:formatCode
  // cda.formatCode ->
  // TODO ClinicalDocument.hl7at:practiceSettingCode
  // cda.practiceSettingCode ->
  // ClinicalDocument.effectiveTime
  cda.effectiveTime as cda_effectiveTime -> fhir_diagnosticReport.effective = create('dateTime') as fhir_diagnosticReport_effective then TSDateTime(cda_effectiveTime, fhir_diagnosticReport_effective) "CdaEffectiveTimeToFhirDiagnosticReportEffective";

  // ClinicalDocument.confidentialityCode
  // see Composition

  // ClinicalDocument.languageCode
  // see Composition

  // ClinicalDocument.setId
  cda.setId -> fhir_diagnosticReport.identifier;

  // ClinicalDocument.versionNumber
  // see Composition
}

// Source: https://art-decor.org/art-decor/decor-templates--at-lab-?section=templates&id=1.2.40.0.34.6.0.11.1.3&effectiveDate=2020-11-24T10:03:02&language=de-DE
// Target: http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureDefinition/at-core-patient
group CdaPatientRoleToFhirPatient(source cda_patientRole : PatientRole, target fhir_patient : Patient, target fhir_bundle : Bundle) {
  cda_patientRole ->
    fhir_patient.meta as fhir_patient_meta,
    fhir_patient_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/Patient-eu-lab'
    "FhirPatientEuLab";

  // TODO check with TC FHIR how profile has to be read - are there additional identifier having no coding allowed apart from PI, SS, or NI?
  // patientRole.id[1]
  cda_patientRole.id first as cda_patientRole_id -> fhir_patient.identifier = create('Identifier') as fhir_patient_identifier then {
    // patientRole.id
    cda_patientRole_id then II(cda_patientRole_id, fhir_patient_identifier) "CdaIdToFhirIdentifier";
    // setting identifier.type.coding according to profile
    cda_patientRole_id ->
      fhir_patient_identifier.type as identifier_type,
      identifier_type.coding as type_coding,
      type_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
      type_coding.code = 'PI',
      type_coding.display = 'Patient internal identifier'
      "FhirPatientIdentifierTypeCodingPI";
  } "CdaLocalPatientIdToFhirPatientIdentifier";

  // patientRole.id[>1]
  cda_patientRole.id not_first as cda_patientRole_id -> fhir_patient.identifier = create('Identifier') as fhir_patient_identifier then {
    // patientRole.id
    cda_patientRole_id then II(cda_patientRole_id, fhir_patient_identifier) "CdaIdToFhirIdentifier";

    // setting identifier.type.coding according to profile for Social Security Number
    cda_patientRole_id where (cda_patientRole_id.root = '1.2.40.0.10.1.4.3.1') ->
      // according to profile no or this fixed value is required
      fhir_patient_identifier.assigner as assigner,
      assigner.display = 'Dachverband der österreichischen Sozialversicherungsträger',

      fhir_patient_identifier.type as identifier_type,
      identifier_type.coding as type_coding,
      type_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
      type_coding.code = 'SS',
      type_coding.display = 'Social Security Number'
      "FhirPatientIdentifierTypeCodingSS";

    // setting identifier.type.coding according to profile for National unique individual identifier
    cda_patientRole_id where (cda_patientRole_id.root = '1.2.40.0.10.2.1.1.149') ->
      // according to profile no or this fixed value is required
      fhir_patient_identifier.assigner as assigner,
      assigner.display = 'Bundesministerium für Inneres',

      fhir_patient_identifier.type as identifier_type,
      identifier_type.coding as type_coding,
      type_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
      type_coding.code = 'NI',
      type_coding.display = 'National unique individual identifier'
      "FhirPatientIdentifierTypeCodingNI";
  } "CdaPatientIdToFhirPatientIdentifier";

  // patientRole.addr using ADAustrianAddress
  // cda_patientRole.addr as cda_patientRole_addr ->
  //   fhir_patient.address = create('Address') as fhir_patient_address then
  //   CdaAdressCompilationToFhirAustrianAddress(cda_patientRole_addr, fhir_patient_address)
  //   "CdaPatientAddressToFhirPatientAustrianAddress";
  cda_patientRole.addr -> fhir_patient.address;

  // patientRole.telecom
  cda_patientRole.telecom -> fhir_patient.telecom;

  // patientRole.patient
  cda_patientRole.patient as cda_patient then {
    // patient.name
    cda_patient.name -> fhir_patient.name;
    // patient.administrativeGenderCode
    cda_patient.administrativeGenderCode as cda_patient_gender then {
      // patient.administrativeGenderCode.code
      cda_patient_gender.code as cda_patient_gender_code -> fhir_patient.gender = translate(cda_patient_gender_code, '#ELGAAdministrativeGenderFHIRGender', 'code') "CdaPatientGenderCodeToFhirPatientGenderCode";
      // TODO patient.administrativeGenderCode.translation
    } "CdaPatientGenderToFhirPatientGender";
    // patient.birthTime (only date)
    cda_patient.birthTime -> fhir_patient.birthDate;
    // patient.birthTime (with time if available)
    cda_patient.birthTime as cda_patient_birthTime where (cda_patient.birthTime.value.toString().length() > 10) -> fhir_patient.birthDate as fhir_patient_birthDate,
      fhir_patient_birthDate.extension as extension,
      extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-birthTime',
      extension.value = create('dateTime') as fhir_patient_birthTime_dateTime then TSDateTime(cda_patient_birthTime, fhir_patient_birthTime_dateTime) "CdaPatientBirthTimeToFhirPatientBirthTimeExtension";
    // patient.deceasedInd
    cda_patient.sdtcDeceasedInd as cda_patient_deceasedInd where cda_patient.sdtcDeceasedTime.empty() -> fhir_patient.deceased = create('boolean') as fhir_patient_deceased then BL(cda_patient_deceasedInd, fhir_patient_deceased) "CdaPatientDeceasedIndToFhirPatientDeceasedBoolean";
    // patient.deceasedTime
    cda_patient.sdtcDeceasedTime as cda_patient_deceasedTime -> fhir_patient.deceased = create('dateTime') as fhir_patient_deceased then TSDateTime(cda_patient_deceasedTime, fhir_patient_deceased) "CdaPatientDeceasedTimeToFhirPatientDeceasedDateTime";
    // patient.maritalStatusCode
    cda_patient.maritalStatusCode -> fhir_patient.maritalStatus;
    // patient.religiousAffiliationCode
    cda_patient.religiousAffiliationCode as cda_patient_religiousAffiliationCode ->
      fhir_patient.extension as religion_extension,
      religion_extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-religion',
      religion_extension.value = create('CodeableConcept') as religion_extension_codeableConcept then CECodeableConcept(cda_patient_religiousAffiliationCode, religion_extension_codeableConcept)
      "CdaPatientReligiousAffiliationCodeToFhirPatientReligionExtension";
    // patient.raceCode NP
    // patient.ethnicGroupCode NP
    // patient.guardian
    cda_patient.guardian as cda_patient_guardian -> fhir_patient.contact as fhir_patient_contact then {
      // TODO code for fhir_patient_contact.relationship
      // patient.guardian.addr
      // cda_patient_guardian.addr as cda_patient_guardian_addr -> fhir_patient_contact.address = create('Address') as fhir_contact_address then CdaAdressCompilationToFhirAustrianAddress(cda_patient_guardian_addr, fhir_contact_address) "CdaGuardianAddressToFhirContactAddress";
      cda_patient_guardian.addr -> fhir_patient_contact.address;
      // patient.guardian.telecom
      cda_patient_guardian.telecom -> fhir_patient_contact.telecom;
      // patient.guardian.guardianPerson
      cda_patient_guardian.guardianPerson as cda_guardian_person then {
        // patient.guardian.guardianPerson.name
        cda_guardian_person.name -> fhir_patient_contact.name;
      } "CdaPatientGuardianPersonToFhirPatientContactName";
      // patient.guardian.guardianOrganization
      cda_patient_guardian.guardianOrganization as cda_guardian_organization then {
        cda_guardian_organization.name as cda_organization_name ->
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Organization') as fhir_contact_organization,
          fhir_contact_organization.id = uuid() as fhir_contact_organization_id,
          // patient.guardian.guardianOrganization.name
          fhir_contact_organization.name = (cda_organization_name.xmlText),
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_contact_organization_id),

          fhir_patient_contact.organization = create('Reference') as fhir_contact_organization_reference,
          fhir_contact_organization_reference.reference = append('urn:uuid:', fhir_contact_organization_id)
          "CdaPatientGuardianOrganizationNameToFhirContactOrganizationReference";
      } "CdaPatientGuardianOrganizationToFhirPatientContactOrganization";
    } "CdaPatientGuardianToFhirPatientContact";
    // patient.birthplace
    cda_patient.birthplace as cda_patient_birthplace then {
      cda_patient_birthplace.place as cda_patient_place then {
        cda_patient_place.addr as cda_patient_birthaddr ->
          fhir_patient.extension as birthplace_extension,
          birthplace_extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-birthPlace',
          birthplace_extension.value = create('Address') as birthplace_extension_addr then CdaAdressCompilationToFhirAustrianAddress(cda_patient_birthaddr, birthplace_extension_addr)
          "CdaPatientBirthplaceAddrToFhirPatientBirthplaceExtensionValue";
      };
    } "CdaPatientBirthplaceToFhirPatientBirthplaceExtension";
    // patient.languageCommunication
    cda_patient.languageCommunication as cda_patient_language -> fhir_patient.communication as fhir_patient_communication then {
      // patient.languageCommunication.languageCode
      cda_patient_language.languageCode as cda_patient_languageCode then {
        cda_patient_languageCode.code as cda_patient_languageCode_code ->
        fhir_patient_communication.language as fhir_patient_communication_language,
        fhir_patient_communication_language.coding as fhir_patient_communication_language_coding,
        fhir_patient_communication_language_coding.system = 'urn:ietf:bcp:47',
        fhir_patient_communication_language_coding.code = cda_patient_languageCode_code
        "CdaPatientLanguageToFhirPatientLanguage";
      };
      // patient.languageCommunication.preferenceInd
      cda_patient_language.preferenceInd -> fhir_patient_communication.preferred;

      cda_patient_language where cda_patient_language.modeCode.exists() or cda_patient_language.proficiencyLevelCode.exists() ->
        fhir_patient_communication.extension as communication_extension,
        communication_extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-proficiency' then {
          // patient.languageCommunication.modeCode
          cda_patient_language.modeCode as cda_patient_language_modeCode ->
            communication_extension.extension as communication_extension_type,
            communication_extension_type.url = 'type',
            communication_extension_type.value = create('Coding') as communication_extension_type_coding then CECoding(cda_patient_language_modeCode, communication_extension_type_coding)
            "CdaLanguageModeCodeToFhirProficiencyType";
          // patient.languageCommunication.proficiencyLevelCode
          cda_patient_language.proficiencyLevelCode as cda_patient_language_proficiencyLevelCode ->
            communication_extension.extension as communication_extension_level,
            communication_extension_level.url = 'level',
            communication_extension_level.value = create('Coding') as communication_extension_level_coding then CECoding(cda_patient_language_proficiencyLevelCode, communication_extension_level_coding)
            "CdaLanguageProficiencyLevelToFhirProficiencyLevel";
        }
        "CdaPatientLanguageProficiencyToFhirPatientCommunicationProficiencyExtension";
    } "CdaPatientLanguageCommunicationToFhirPatientCommunication";
  } "CdaPatientToFhirPatient";
}

// Source: https://art-decor.org/art-decor/decor-templates--at-lab-?section=templates&id=1.2.40.0.34.6.0.11.1.2&effectiveDate=2021-08-24T08:35:56&language=de-DE
// Target: http://hl7.org/fhir/practitionerrole.html
//         http://hl7.org/fhir/practitioner.html
group CdaAuthorToFhirPractitionerRole(source cda_author : Author, target fhir_practitionerRole : PractitionerRole, target fhir_bundle : Bundle){
  cda_author ->
    // create the Practitioner
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('Practitioner') as fhir_practitioner,
    fhir_practitioner.id = uuid() as fhir_practitioner_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole.practitioner = create('Reference') as fhir_practitionerRole_practitioner_reference,
    fhir_practitionerRole_practitioner_reference.reference = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole_practitioner_reference.type = 'Practitioner' then {
      // ClinicalDocument.author.functionCode
      cda_author.functionCode -> fhir_practitionerRole.code;
      // ClinicalDocument.author.time
      // TODO extension?
      // ClinicalDocument.author.time
      // TODO nullFlavor? http://hl7.org/fhir/R4/extension-data-absent-reason.html
      // ClinicalDocument.author.assignedAuthor
      cda_author.assignedAuthor as cda_author_assignedAuthor then {
        // ClinicalDocument.author.assignedAuthor.id
        cda_author_assignedAuthor.id -> fhir_practitioner.identifier;
        // ClinicalDocument.author.assignedAuthor.code
        cda_author_assignedAuthor.code as cda_author_assignedAuthor_code ->
          fhir_practitioner.qualification as fhir_practitioner_qualification,
          fhir_practitioner_qualification.code as fhir_practitioner_qualification_code then
          CECodeableConcept(cda_author_assignedAuthor_code,fhir_practitioner_qualification_code);
        // ClinicalDocument.author.assignedAuthor.telecom
        cda_author_assignedAuthor.telecom -> fhir_practitioner.telecom;
        // ClinicalDocument.author.assignedAuthor.assignedPerson
        cda_author_assignedAuthor.assignedPerson as cda_assignedPerson then {
          cda_assignedPerson.name -> fhir_practitioner.name;
        };
        // ClinicalDocument.author.assignedAuthor.representedOrganization
        cda_author_assignedAuthor.representedOrganization as cda_representedOrganization ->
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Organization') as fhir_organization,
          fhir_organization.id = uuid() as fhir_organization_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
          fhir_practitionerRole.organization = create('Reference') as fhir_practitionerRole_organization,
          fhir_practitionerRole_organization.reference = append('urn:uuid:', fhir_organization_id),
          fhir_practitionerRole_organization.type = 'Organization' then
          CdaOrganizationCompilationToFhirOrganization(cda_representedOrganization, fhir_organization);
      };
    } "CdaAuthorToFhirPractitionerRole";
}

// Source: https://art-decor.org/art-decor/decor-templates--at-lab-?section=templates&id=1.2.40.0.34.6.0.11.1.2&effectiveDate=2021-08-24T08:35:56&language=de-DE
// Target: http://hl7.org/fhir/device.html
group CdaAuthorToFhirDevice(source cda_author : Author, target fhir_device : Device, target fhir_bundle : Bundle){
    // author.functionCode
    // TODO correct?
    cda_author.functionCode -> fhir_device.type;
    // author.time
    // TODO extension?
    // author.time
    // TODO nullFlavor?
    // author.assignedAuthor
    cda_author.assignedAuthor as cda_author_assignedAuthor then {
      // author.assignedAuthor.id
      cda_author_assignedAuthor.id -> fhir_device.identifier;
      // author.assignedAuthor.code
      // skipped because no value in ValueSet ELGA_AuthorSpeciality suits a device
      // author.assignedAuthor.telecom
      cda_author_assignedAuthor.telecom -> fhir_device.contact;
      // author.assignedAuthor.assignedAuthoringDevice
      cda_author_assignedAuthor.assignedAuthoringDevice as cda_assignedAuthoringDevice then {
        // author.assignedAuthor.assignedAuthoringDevice.manufacturerModelName
        cda_assignedAuthoringDevice.manufacturerModelName as cda_manufacturerModelName ->
          fhir_device.deviceName as fhir_device_deviceName,
          fhir_device_deviceName.name = (cda_manufacturerModelName.xmlText),
          fhir_device_deviceName.type = 'model-name';
        // author.assignedAuthor.assignedAuthoringDevice.softwareName
        // TODO not clear if this is the right place to store that information
        cda_assignedAuthoringDevice.softwareName as cda_softwareName ->
          fhir_device.deviceName as fhir_device_deviceName,
          fhir_device_deviceName.name = (cda_softwareName.xmlText),
          fhir_device_deviceName.type = 'other';
      };
      // author.assignedAuthor.representedOrganization
      cda_author_assignedAuthor.representedOrganization as cda_representedOrganization ->
        fhir_bundle.entry as fhir_bundle_entry,
        fhir_bundle_entry.resource = create('Organization') as fhir_organization,
        fhir_organization.id = uuid() as fhir_organization_id,
        fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
        fhir_device.owner = create('Reference') as fhir_device_owner,
        fhir_device_owner.reference = append('urn:uuid:', fhir_organization_id),
        fhir_device_owner.type = 'Organization' then
        CdaOrganizationCompilationToFhirOrganization(cda_representedOrganization, fhir_organization);
    };
}

group CdaEncompassingEncounterToFhirEncounter(source cda_encompassingEncounter : EncompassingEncounter, target fhir_encounter : Encounter, target fhir_bundle : Bundle) {
  // encompassingEncounter.id
  cda_encompassingEncounter.id -> fhir_encounter.identifier;
  // fhir_encounter.status
  cda_encompassingEncounter -> fhir_encounter.status = 'finished' "FhirEncounterStatus";
  // encompassingEncounter.code
  cda_encompassingEncounter.code -> fhir_encounter.class;
  // encompassingEncounter.effectiveTime
  cda_encompassingEncounter.effectiveTime -> fhir_encounter.period;
  // encompassingEncounter.responsibleParty
  cda_encompassingEncounter.responsibleParty as cda_responsibleParty then {
    // encompassingEncounter.responsibleParty.assignedEntity
    cda_responsibleParty.assignedEntity as cda_assignedEntity ->
      fhir_encounter.participant as fhir_encounter_participant,
      // create the PractitionerRole
      fhir_bundle.entry as fhir_bundle_entry,
      fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
      fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
      fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
      fhir_encounter_participant.individual = create('Reference') as fhir_practitionerRole_reference,
      fhir_practitionerRole_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
      fhir_practitionerRole_reference.type = 'PractitionerRole' then
      CdaAssignedEntityToFhirPractitionerRole(cda_assignedEntity, fhir_practitionerRole, fhir_bundle);
  };
  // encompassingEncounter.location
  cda_encompassingEncounter.location as cda_location then {
    // encompassingEncounter.location.healthCareFacility
    cda_location.healthCareFacility as cda_healthCareFacility ->
      fhir_encounter.location as fhir_encounter_location,
      // create the Location
      fhir_bundle.entry as fhir_bundle_entry,
      fhir_bundle_entry.resource = create('Location') as fhir_location,
      fhir_location.id = uuid() as fhir_location_id,
      fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_location_id),
      fhir_encounter_location.location = create('Reference') as fhir_location_reference,
      fhir_location_reference.reference = append('urn:uuid:', fhir_location_id),
      fhir_location_reference.type = 'Location' then {
        // encompassingEncounter.location.healthCareFacility.code
        cda_healthCareFacility.code -> fhir_location.type;
        // encompassingEncounter.location.healthCareFacility.serviceProviderOrganization
        cda_healthCareFacility.serviceProviderOrganization as cda_serviceProviderOrganization ->
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Organization') as fhir_organization,
          fhir_organization.id = uuid() as fhir_organization_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
          fhir_location.managingOrganization	 = create('Reference') as fhir_location_managingOrganization,
          fhir_location_managingOrganization.reference = append('urn:uuid:', fhir_organization_id),
          fhir_location_managingOrganization.type = 'Organization' then
          CdaOrganizationCompilationToFhirOrganization(cda_serviceProviderOrganization, fhir_organization);
      };
  };
}

// // source dataEnterer: https://art-decor.org/art-decor/decor-templates--hl7chcda-?id=2.16.756.5.30.1.1.10.2.7
// // source author: https://art-decor.org/art-decor/decor-templates--hl7chcda-?id=2.16.840.1.113883.10.12.102
// // target: https://build.fhir.org/ig/hl7ch/ch-core//StructureDefinition-ch-ext-epr-time.html
// group ChExtEprTime(source src: TSDateTime, target ext: Extension) {
//   src -> ext.url = 'http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-time' "url";
//   src -> ext.value = create('dateTime') as value then TSDateTime(src, value) "value";
// }


// // https://art-decor.org/art-decor/decor-templates--hl7chcda-?id=2.16.756.5.30.1.1.10.3.45
// // target: http://build.fhir.org/ig/hl7ch/ch-core/branches/master/StructureDefinition-ch-ext-epr-sectionid.html
// group ChExtEprSectionId(source src: II, target ext: Extension) {
//   src -> ext.url = 'http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-sectionid' "url";
//   src -> ext.value = create('Identifier') as value then II(src, value) "value";
// }

// _________________________ Section Level Templates _________________________

group CdaBodyToFhirComposition(source cda: ClinicalDocument, source cda_structuredBody: StructuredBody, target fhir_composition: Composition, target fhir_practitionerRole: PractitionerRole, target fhir_patient: Patient, target fhir_diagnosticReport: DiagnosticReport, target fhir_bundle: Bundle) {
  cda_structuredBody.component as cda_component then {
    // TODO check where these sections should be placed
    //
    // simple sections
    cda_component.section as cda_section where code.where(code='BRIEFT' and codeSystem='1.2.40.0.34.5.40') or // Brieftext
                                                (code.where(code='46239-0' and codeSystem='2.16.840.1.113883.6.1') and (templateId.where(root='1.2.40.0.34.6.0.11.2.114') or templateId.where(root='1.2.40.0.34.11.4.2.4'))) // Überweisungsgrund - uncodiert
                                                or (code.where(code='10164-2' and codeSystem='2.16.840.1.113883.6.1') and templateId.where(root='1.2.40.0.34.6.0.11.2.111')) // Anamnese - Labor und Mikrobiologie - uncodiert
                                                or (code.where(code='400999005' and codeSystem='2.16.840.1.113883.6.96') and templateId.where(root='1.2.40.0.34.6.0.11.2.112')) // Angeforderte Untersuchungen - uncodiert
                                                or (code.where(code='ABBEM' and codeSystem='1.2.40.0.34.5.40') and templateId.where(root='1.2.40.0.34.6.0.11.2.70')) // Abschließende Bemerkung
                                                 ->
    fhir_composition.section as fhir_section then CdaSectionToFhirSection(cda_section, fhir_section, fhir_bundle);

    // complex sections

    // Probeninformation (Specimen Section)
    cda_component.section as cda_section where code.where(code='10' and codeSystem='1.2.40.0.34.5.11') then CdaSpecimenSectionToFhirSpecimen(cda_section, fhir_patient, fhir_diagnosticReport, fhir_bundle);

    // Laboratory Specialty Section
    cda_component.section as cda_section where templateId.where(root='1.2.40.0.34.6.0.11.2.102' or root='1.3.6.1.4.1.19376.1.3.3.2.1')
      -> fhir_composition.section as fhir_section then CdaLaboratorySpecialtySectionToFhirSection(cda, cda_section, fhir_section, fhir_practitionerRole, fhir_patient, fhir_diagnosticReport, fhir_bundle);

    // Befundbewertung
    cda_component.section as cda_section where code.where(code='20' and codeSystem='1.2.40.0.34.5.11')
      -> fhir_composition.section as fhir_section then CdaBefundbewertungSectionToFhirSection(cda_section, fhir_section, fhir_bundle);

    // Beilagen
    cda_component.section as cda_section where code.where(code='BEIL' and codeSystem='1.2.40.0.34.5.40')
      then CdaBeilagenSectionToFhirDiagnosticReportMedia(cda_section, fhir_diagnosticReport, fhir_bundle, fhir_patient);
    
    // Sections for the TME 
    // simple sections for TME, whereas Brieftext and Beilagen are already transformed from Laborbefund: 
   
    cda_component.section as cda_section where code.where (code='408773008' and codeSystem='2.16.840.1.113883.6.96') and templateId.where(root='1.2.40.0.34.6.0.11.2.79') // Behandlungsgrund - uncodiert
        -> fhir_composition.section as fhir_section then CdaSectionToFhirSection(cda_section, fhir_section, fhir_bundle);

    // sections which need extention 
    cda_component.section as cda_section where code.where(code='721917003' and codeSystem='2.16.840.1.113883.6.96') and templateId.where(root='1.2.40.0.34.6.0.11.2.80') // Zusammenfassung der Behandlung- uncodiert
    -> fhir_composition.section as fhir_section then CdaZusammenfassungBehandlungSectionToFhir(cda_section, fhir_section, fhir_bundle);

    
    cda_component.section as cda_section where code.where(code='703852005' and codeSystem='2.16.840.1.113883.6.96') // Auszüge aus erhobenen Daten - uncodiert
    -> fhir_composition.section as fhir_section then  CdaAuszugErhobeneDatenSectionToFhir(cda_section, fhir_section, fhir_bundle);


    //Diagnosis
    cda_component.section as cda_section where templateId.where(root='1.2.40.0.34.6.0.11.2.96')
       -> fhir_composition.section as fhir_section then CdaDiagnosisToFhirSection(cda, cda_section, fhir_section, fhir_practitionerRole, fhir_patient, fhir_diagnosticReport, fhir_bundle);

    // ToDo add the observation for the diagnosis

    //Erhobene Daten
    cda_component.section as cda_section where templateId.where(root='1.2.40.0.34.6.0.11.2.81')
        -> fhir_composition.section as fhir_section then CdaErhobeneDatenToFhirSection(cda, cda_section, fhir_section, fhir_practitionerRole, fhir_patient, fhir_diagnosticReport, fhir_bundle);
 
     // ToDo add the observation for the diagnosis

    
  };
}

group CdaToPractitionerRole(source cda: ClinicalDocument, target fhir_practitionerRole: PractitionerRole, target fhir_bundle: Bundle) {
    // performer has been specified in documentationOf[1]serviceEvent.performer
    cda where cda.documentationOf[0].serviceEvent.performer.exists() then {
        // ClinicalDocument.documentationOf
        cda.documentationOf first as cda_documentationOf then {
            // ClinicalDocument.documentationOf.serviceEvent
            cda_documentationOf.serviceEvent as cda_documentationOf_serviceEvent then {
                cda_documentationOf_serviceEvent.performer as cda_documentationOf_serviceEvent_performer then {
                    // observation.performer.assignedEntity
                    cda_documentationOf_serviceEvent_performer.assignedEntity as cda_performer_assignedEntity
                        then CdaAssignedEntityToFhirPractitionerRole(cda_performer_assignedEntity, fhir_practitionerRole, fhir_bundle);
                };
            };
        };
    } "CdaDocumentationOfServiceEventPerformerExists";
    // no performer has been specified in documentationOf[1]serviceEvent.performer. as a result the ClinicalDocument.authors will be taken as performer
    cda where cda.documentationOf[0].serviceEvent.performer.exists().not() then {
        // ClinicalDocument.author (as person)
        cda.author as cda_author where $this.assignedAuthor.assignedPerson.exists() then
            // create the PractitionerRole in order to capture the author.functionCode
            CdaAuthorToFhirPractitionerRole(cda_author, fhir_practitionerRole, fhir_bundle)
            "CdaAuthorToObservationPerformer";
    } "CdaDocumentationOfServiceEventPerformerExistsNot";
}

group CdaSectionToFhirSection(source cda_section: Section, target fhir_section, target fhir_bundle: Bundle) {
  // section.templateId
  // TODO necessary?
  // section.id
  // TODO extension?
  // section.code
  cda_section.code -> fhir_section.code;
  // section.title
  cda_section.title as cda_section_title -> fhir_section.title = (cda_section_title.xmlText) "test";
  // section.text
  cda_section.text as cda_section_text ->
    fhir_section.text as fhir_section_text,
    fhir_section_text.status = 'generated' then {
      // section.text where no section.languageCode exists
      cda_section_text where cda_section.languageCode.exists().not() -> fhir_section_text.div = cda_section_text "asdf";

      // section.text with section.languageCode
      cda_section_text where cda_section.languageCode.exists() then {
        cda_section.languageCode as cda_languageCode then {
          cda_languageCode.code as cda_languageCode_code ->

            // as long as TODO below has not been solved
            fhir_section_text.div = cda_section_text "asdf";
            // TODO fix output:
            //   Currently, the output will look like <div xml:lang="XX"><div xmlns="http://www.w3.org/1999/xhtml">section.text</div></div>
            //   However, the div-tag with the xml:lang should be within the div-tag with the xmlns.
            //
            //  fhir_section_text.div = append('<div xml:lang="', cda_languageCode_code, '">', cda_section_text, '</div>') "asdf";
        };
      } "CdaSectionTextToFhirSectionTextWithLanguage";
    };
  // section.author
  cda_section.author as cda_section_author ->
    // create the PractitionerRole in order to capture the author
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_section.author = create('Reference') as fhir_section_author_reference,
    fhir_section_author_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_section_author_reference.type = 'PractitionerRole' then
    CdaAuthorToFhirPractitionerRole(cda_section_author, fhir_practitionerRole, fhir_bundle);
  // section.informant
  // TODO ?

  // Observation Media
  // section.entry with observationMedia
  //
  // TODO currently unclear where to place attachments
  //
  // cda_section.entry as cda_section_entry where $this.observationMedia.exists() then {
  //   // section.entry.observationMedia
  //   cda_section_entry.observationMedia as cda_observationMedia ->
  //     // create Binary
  //     fhir_bundle.entry as fhir_bundle_entry,
  //     fhir_bundle_entry.resource = create('Binary') as fhir_binary,
  //     fhir_binary.id = uuid() as fhir_binary_id,
  //     fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_binary_id),
  //     fhir_section.entry = create('Reference') as fhir_section_entry_reference,
  //     fhir_section_entry_reference.reference = append('urn:uuid:', fhir_binary_id),
  //     fhir_section_entry_reference.type = 'Binary' then {
  //       // section.entry.observationMedia.value
  //       cda_observationMedia.value as cda_observationMedia_value then {
  //         cda_observationMedia_value -> fhir_binary.data = (cda_observationMedia_value.dataBase64Binary) "CdaObservationMediaValueToFhirBinaryData";
  //         // section.entry.observationMedia.value.mediaType
  //         cda_observationMedia_value.mediaType as cda_mediaType -> fhir_binary.contentType = cda_mediaType;
  //       };
  //       // section.entry.observationMedia.performer
  //       // TODO ?
  //       // section.entry.observationMedia.author
  //       // TODO ?
  //       // section.entry.observationMedia.informant
  //       // TODO ?
  //       // section.entry.observationMedia.participant
  //       // TODO ?
  //     };
  // };

  // TODO (currently disabled)
  // - deal with text in lab-subsections
  // - take a look into properly transform <reference>-tags
  //
  // Comment Entry
  // section.entry
  //
  // cda_section.entry as cda_entry where $this.act.templateId.where(root='2.16.840.1.113883.10.20.1.40') then {
  //   // section.entry.act
  //   cda_entry.act as cda_act then {
  //     cda_act.text as cda_act_text ->
  //       fhir_section.section as fhir_section_section,
  //       fhir_section_section.text as fhir_section_section_text,
  //       fhir_section_section_text.status = 'generated',

  //       // TODO take a look into properly transform <reference>-tags
  //       fhir_section_section_text.div = cda_act_text;

  //       // fhir_section.title = cda_act_text;
  //       // fhir_section.title = cast(cda_act_text, 'string');
  //       // fhir_section.title = (cda_act_text.data);
  //       // fhir_section.title = append('<div xmlns="http://www.w3.org/1999/xhtml">', cda_act_text, '</div>') "asdf";
  //       // fhir_section_section_text.div = (cda_act_text.dataString);
  //       // fhir_section_section_text.div = append('<div xmlns="http://www.w3.org/1999/xhtml">', cda_act_text, '</div>') "asdf";

  //       // cda_section.title as cda_section_title -> fhir_section.title = (cda_section_title.dataString) "test";
  //   };
  // };

  // TODO (currently disabled)
  // - section code has to be defined
  // - dealing with transformation of section.text in connection with xml:lang
  //
  // Übersetzung
  // section.component
  //
  // cda_section.component as cda_section_component then {
  //   cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.8') // Übersetzung
  //     -> fhir_section.section as fhir_section_section
  //     then CdaSectionToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle);
  // };
}

group CdaSpecimenSectionToFhirSpecimen(source cda_section: Section, target fhir_patient: Patient, target fhir_diagnosticReport: DiagnosticReport, target fhir_bundle: Bundle) {
  // section.entry (Probeninformation (Specimen Entry))
  cda_section.entry as cda_section_entry then {
    // section.entry.act
    cda_section_entry.act as cda_act where $this.code.where(code='10') then {
      // section.entry.act.entryRelationship
      cda_act.entryRelationship as cda_entryRelationship then {
        // section.entry.act.entryRelationship.procedure
        cda_entryRelationship.procedure as cda_procedure ->
          // create the specimen to have it as reference for later transformations
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Specimen') as fhir_specimen,
          fhir_specimen.id = uuid() as fhir_specimen_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_specimen_id),

          // create relation from specimen to patient
          fhir_specimen.subject = create('Reference') as fhir_specimen_patient_reference,
          fhir_patient.id as fhir_patient_id,
          fhir_specimen_patient_reference.reference = append('urn:uuid:', fhir_patient_id),
          fhir_specimen_patient_reference.type = 'Patient',

          // create relation from DiagnosticReport to specimen
          fhir_diagnosticReport.specimen = create('Reference') as fhir_diagnosticReport_specimen_reference,
          fhir_specimen.id as fhir_specimen_id,
          fhir_diagnosticReport_specimen_reference.reference = append('urn:uuid:', fhir_specimen_id),
          fhir_diagnosticReport_specimen_reference.type = 'Specimen',

          fhir_specimen.collection as fhir_specimen_collection then {
            // Abnahmedatum/-zeit bzw. -zeitintervall des Untersuchungsmaterials
            // procedure.effectiveTime with value
            cda_procedure.effectiveTime as cda_effectiveTime where $this.value.exists() then {
              cda_effectiveTime.value as v ->
                fhir_specimen_collection.collected = v;
            };
            // TODO procedure.effectiveTime high / low -> Period

            // Entnahmeort
            // procedure.targetSiteCode
            cda_procedure.targetSiteCode -> fhir_specimen_collection.bodySite;

            // Für die Abnahme verantwortlichen Person/Organisation
            // procedure.performer
            // TODO has to be modelled with ServiceRequest/Performer

            // Untersuchungsmaterial
            // procedure.participant
            cda_procedure.participant as cda_participant then {
              // procedure.participant.participantRole
              cda_participant.participantRole as cda_participantRole then {
                // procedure.participant.participantRole.playingEntity
                cda_participantRole.playingEntity as cda_playingEntity then {
                  // procedure.participant.participantRole.id
                  cda_participantRole.id -> fhir_specimen.accessionIdentifier;
                  // procedure.participant.participantRole.playingEntity.code
                  cda_playingEntity.code -> fhir_specimen.type;
                };
              };
            };

            // Annahmeinformation
            // procedure.entryRelationship
            cda_procedure.entryRelationship as cda_entryRelationship then {
              // procedure.entryRelationship
              cda_entryRelationship.act as cda_act then {
                // Zeitpunkt des Einlangen des Untersuchungsmaterials
                // act.effectiveTime with value
                cda_act.effectiveTime as cda_effectiveTime where $this.value.exists() then {
                  cda_effectiveTime.value as v ->
                    fhir_specimen.receivedTime = v;
                };
                // TODO act.effectiveTime high / low -> Period


                // TODO CDA level 4 Referenzen müssen noch aufgelöst werden
                // // Anmerkung zur Qualität des Untersuchungsmaterials
                // // act.entryRelationship
                // cda_act.entryRelationship as cda_comment_entryRelationship then {
                //   // act.entryRelationship.act
                //   cda_comment_entryRelationship.act as cda_comment_act then {
                //     // act.entryRelationship.act.text
                //     // TODO CDA level 4 Referenzen müssen noch aufgelöst werden
                //     cda_comment_act.text as cda_comment_act_text ->
                //       fhir_specimen.note as fhir_specimen_note,
                //       fhir_specimen_note.text = cda_comment_act_text;
                //   };
                // };
              };
            };
        };
      };
    };
  };
}

group CdaLaboratorySpecialtySectionToFhirSection (source cda: ClinicalDocument, source cda_section: Section, target fhir_section, target fhir_practitionerRole: PractitionerRole, target fhir_patient: Patient, target fhir_diagnosticReport: DiagnosticReport, target fhir_bundle: Bundle) extends CdaSectionToFhirSection {
  // section.entry (Laboratory Report Data Processing Entry)
  cda_section.entry as cda_section_entry then {
    // section.entry.act
    cda_section_entry.act as cda_act then {

      // // section.entry.act.entryRelationship (Laboratory Observation)
      // cda_act.entryRelationship as cda_entryRelationship where $this.observation.templateId.where(root='1.3.6.1.4.1.19376.1.3.1.6') then {
      //   cda_entryRelationship.observation as cda_laboratory_observation ->
      //     // create Observation
      //     fhir_bundle.entry as fhir_bundle_entry,
      //     fhir_bundle_entry.resource = create('Observation') as fhir_observation,
      //     fhir_observation.id = uuid() as fhir_observation_id,
      //     fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_observation_id),
      //     fhir_section.entry = create('Reference') as fhir_section_entry_reference,
      //     fhir_section_entry_reference.reference = append('urn:uuid:', fhir_observation_id),
      //     fhir_section_entry_reference.type = 'Observation';// then CdaLaboratoryObservationToFhirObservation(cda_laboratory_observation, fhir_section_section);
      // };

      // section.entry.act.entryRelationship (Laboratory Battery Organizer)
      cda_act.entryRelationship as cda_entryRelationship where $this.organizer.templateId.where(root='1.3.6.1.4.1.19376.1.3.1.4') then {
        cda_entryRelationship.organizer as cda_laboratory_battery_organizer ->
          // create Observation
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Observation') as fhir_observation,
          fhir_observation.id = uuid() as fhir_observation_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_observation_id),
          fhir_section.entry = create('Reference') as fhir_section_entry_reference,
          fhir_section_entry_reference.reference = append('urn:uuid:', fhir_observation_id),
          fhir_section_entry_reference.type = 'Observation' then {

            cda_laboratory_battery_organizer ->
              fhir_observation.meta as fhir_observation_meta,
              fhir_observation_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/Observation-resultslab-eu-lab'
              "FhirObservationProfile";

            // fhir_observation.category
            cda_laboratory_battery_organizer -> fhir_observation.category as fhir_category,
              fhir_category.coding as fhir_category_coding,
              fhir_category_coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
              fhir_category_coding.code = 'laboratory'
              "FhirObservationCategoryCoding";
            // fhir_observation.subject
            cda_laboratory_battery_organizer ->
              fhir_observation.subject = create('Reference') as fhir_observation_subject_reference,
              fhir_patient.id as fhir_patient_id,
              fhir_observation_subject_reference.reference = append('urn:uuid:', fhir_patient_id)
              "FhirObservationSubject";

            // organizer.code
            cda_laboratory_battery_organizer.code -> fhir_observation.category;
            cda_laboratory_battery_organizer.code -> fhir_observation.code;
            // organizer.statusCode
            cda_laboratory_battery_organizer.statusCode as organizer_statusCode then {
              organizer_statusCode.code as cda_code -> fhir_observation.status = translate(cda_code, '#act-status-2-observation-status' , 'code');
            } "CdaStatusCodeToFhirObservationStatusMapped";
            // organizer.effectiveTime
            // TODO
            cda_laboratory_battery_organizer.effectiveTime as cda_effectiveTime ->
              fhir_observation.effective = create('dateTime') as fhir_observation_effective,
              fhir_observation_effective.extension as fhir_observation_effective_extenstion,
              fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
              fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
              fhir_observation_effective_extenstion_code.value = 'not-applicable'
               then TSDateTime(cda_effectiveTime, fhir_observation_effective)
               "CdaEffectiveTimeToFhirObservationEffective";
            cda_laboratory_battery_organizer
              where cda_laboratory_battery_organizer.effectiveTime.exists().not() ->
              fhir_observation.effective = create('dateTime') as fhir_observation_effective,
              fhir_observation_effective.value = '1900-01-01',
              fhir_observation_effective.extension as fhir_observation_effective_extenstion,
              fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
              fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
              fhir_observation_effective_extenstion_code.value = 'not-applicable'
               "CdaEffectiveTimeExistsNotToFhirObservationEffective";

            // organizer.performer if existent in organizer
            cda_laboratory_battery_organizer.performer as cda_laboratory_battery_organizer_performer
                where cda_laboratory_battery_organizer.performer.exists()
                then CdaPerformerToFhirObservationPerformer(cda_laboratory_battery_organizer_performer, fhir_observation, fhir_bundle)
                "CdaBatteryOrganizerPerformerToFhirObservationPerformer";
            // organizer.performer if not existent in organizer
            cda_laboratory_battery_organizer where cda_laboratory_battery_organizer.performer.exists().not() then {
                cda where cda.documentationOf[0].serviceEvent.performer.exists() then {
                    // ClinicalDocument.documentationOf
                    cda.documentationOf first as cda_documentationOf then {
                        // ClinicalDocument.documentationOf.serviceEvent
                        cda_documentationOf.serviceEvent as cda_documentationOf_serviceEvent then {
                            cda_documentationOf_serviceEvent.performer as cda_documentationOf_serviceEvent_performer then {
                                // observation.performer.time - it is assumed that only @value occurs and no interval
                                cda_documentationOf_serviceEvent_performer.time -> fhir_observation.issued;
                            };
                        };
                    };
                } "CdaDocumentationOfServiceEventPerformerExists";
                cda ->
                    fhir_observation.performer = create('Reference') as fhir_observation_performer_reference,
                    fhir_practitionerRole.id as fhir_practitionerRole_id,
                    fhir_observation_performer_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
                    fhir_observation_performer_reference.type = 'PractitionerRole'
                "CdaBatteryOrganizerPerformerExistsNotRole";
            } "CdaBatteryOrganizerPerformerExistsNot";

            // organizer.component (Laboratory Observation)
            cda_laboratory_battery_organizer.component as cda_component where $this.observation.templateId.where(root='1.3.6.1.4.1.19376.1.3.1.6') then {
              cda_component.observation as cda_laboratory_observation ->
                // create Observation
                fhir_bundle.entry as fhir_bundle_entry,
                fhir_bundle_entry.resource = create('Observation') as fhir_laboratory_observation,
                fhir_laboratory_observation.id = uuid() as fhir_laboratory_observation_id,
                fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_laboratory_observation_id),
                fhir_observation.hasMember = create('Reference') as fhir_observation_hasMember_reference,
                fhir_observation_hasMember_reference.reference = append('urn:uuid:', fhir_laboratory_observation_id),
                fhir_observation_hasMember_reference.type = 'Observation'
                then CdaLaboratoryObservationToFhirObservation(cda, cda_laboratory_observation, fhir_laboratory_observation, fhir_practitionerRole, fhir_patient, fhir_bundle);
            };
          };
      };
    };
  };
}

group CdaBeilagenSectionToFhirDiagnosticReportMedia(source cda_section: Section, target fhir_diagnosticReport: DiagnosticReport, target fhir_bundle: Bundle, target fhir_patient: Patient) {
  cda_section ->
    // create Media resource
    fhir_bundle.entry as fhir_bundle_entry_01,
    fhir_bundle_entry_01.resource = create('Media') as fhir_media,
    fhir_media.id = uuid() as fhir_media_id,
    fhir_bundle_entry_01.fullUrl = append('urn:uuid:', fhir_media_id),
    fhir_diagnosticReport.media as fhir_diagnosticReport_media,
    fhir_diagnosticReport_media.link = create('Reference') as fhir_diagnosticReport_media_link_reference,
    fhir_diagnosticReport_media_link_reference.reference = append('urn:uuid:', fhir_media_id),
    fhir_diagnosticReport_media_link_reference.type = 'Media'
    then {
      cda_section.entry as cda_section_entry then {
        cda_section_entry.observationMedia as cda_observationMedia then {
          // cda_section.text
          cda_section.text as cda_section_text -> fhir_diagnosticReport_media.comment = (cda_section_text);
          // cda_observationMedia@ID
          cda_observationMedia.ID as cda_observationMedia_ID ->
            fhir_media.identifier as fhir_media_identifier,
            fhir_media_identifier.value = cda_observationMedia_ID
            "CdaObservationMediaIDFhirMediaIdentifier";
          // fhir_media.status
          cda_observationMedia -> fhir_media.status = 'completed' "FhirMediaStatus";
          // cda_observationMedia.value
          cda_observationMedia.value as cda_observationMedia_value ->
            fhir_media.content as fhir_media_content
            then {
              // cda_observationMedia@mediaType
              cda_observationMedia_value.mediaType as cda_mediaType -> fhir_media_content.contentType = cda_mediaType;
              // cda_observationMedia.value
              cda_observationMedia_value -> fhir_media_content.data = (cda_observationMedia_value.xmlText) "CdaObservationMediaValueToFhirAttachmentData";
          };
        };
      };
    }
    "CdaBeilagenToFhirMedia";
}

group CdaBefundbewertungSectionToFhirSection(source cda_section: Section, target fhir_section, target fhir_bundle: Bundle) extends CdaSectionToFhirSection {
  // section.code
  cda_section ->
    fhir_section.code as fhir_section_code,
    fhir_section_code.coding as fhir_section_coding,
    fhir_section_coding.code = '48767-8',
    fhir_section_coding.system = 'http://loinc.org'
    "FhirAnnotationSectionCoding";
}

// group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, source patient : Patient, target tgt, target bundle: Bundle) {
//   src.id as id where ($this.root=%cda.id.root)=false -> tgt.extension as ext then ChExtEprSectionId(id, ext) "sectionId";
//   src.title as t -> tgt.title = (t.dataString);
//   src.code -> tgt.code;
//   src.text as cdaText -> tgt.text as fhirText then {
//     cdaText -> fhirText.status = 'generated' "narrativeStatus";
//     cdaText as t -> fhirText.div = t "narrativeText";
//   } "cdaText";
//   src.section as srcSection -> tgt.section as tgtSection then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle);
// }

// section to map text of Zusammenfassung der Behandlung
group CdaZusammenfassungBehandlungSectionToFhir(source cda_section: Section, target fhir_section, target fhir_bundle: Bundle) extends CdaSectionToFhirSection {
  cda_section.component as cda_section_component then {
    cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.92') // Einträge
      -> fhir_section.section as fhir_section_section
      then CdaSectionToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle);
};
}

// section to map text of Auszüge aus erhobenen Daten
group CdaAuszugErhobeneDatenSectionToFhir(source cda_section: Section, target fhir_section, target fhir_bundle: Bundle) extends CdaSectionToFhirSection {
    cda_section.component as cda_section_component then {
      cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.92') // Einträge
        -> fhir_section.section as fhir_section_section
        then CdaEintraegeToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle);
  };
}

group CdaEintraegeToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle) extends CdaSectionToFhirSection {
    // Here the entries are needed to be defined
}



group CdaDiagnosisToFhirSection(source cda: ClinicalDocument, source cda_section: Section, target fhir_section, target fhir_practitionerRole: PractitionerRole, target fhir_patient: Patient, target fhir_diagnosticReport: DiagnosticReport, target fhir_bundle: Bundle) extends CdaSectionToFhirSection {
// Here the entries are needed to be defined
  }


group CdaErhobeneDatenToFhirSection(source cda: ClinicalDocument, source cda_section: Section, target fhir_section, target fhir_practitionerRole: PractitionerRole, target fhir_patient: Patient, target fhir_diagnosticReport: DiagnosticReport, target fhir_bundle: Bundle) extends CdaSectionToFhirSection{
// Here the entries are needed to be defined
    cda_section.component as cda_section_component then {
        cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.46') // Vitalparameter
        -> fhir_section.section as fhir_section_section
        then CdaVitalprameterToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle, fhir_patient, cda_section, fhir_section);


        cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.95') // Messeregbnisse
        -> fhir_section.section as fhir_section_section
        then CdaMessergebnisseToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle);


        cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.63') // Medikationsliste PS
        -> fhir_section.section as fhir_section_section
        then CdaMedikationslisteToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle);


        cda_section_component.section as cda_section_component_section where templateId.where(root='1.2.40.0.34.6.0.11.2.94') // Dokumentierte Einnahme 
            -> fhir_section.section as fhir_section_section
        then CdaDokumentierteEinnahmeToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle);
    
};
}

group CdaVitalprameterToFhirSection( cda_section_component_section, fhir_section_section, fhir_bundle, fhir_patient, cda_section, fhir_section) extends CdaSectionToFhirSection {
//going down on level for the observation
    cda_section_component_section.entry as cda_section_component_section_entry then {
        // section.entry.act
        cda_section_component_section_entry.organizer as cda_organizer then{

            cda_organizer.component as cda_organizer_component then {
                
                // checking if we have a Vitalparameter-entry
                cda_organizer_component.observation as cda_organizer_component_observation where templateId.where(root='1.2.40.0.34.6.0.11.3.24') then {
        
                    cda_organizer_component.observation as cda_organizer_component_observation -> 
                    fhir_bundle.entry as fhir_bundle_entry,
                    fhir_bundle_entry.resource = create('Observation') as fhir_observation,
                    fhir_observation.id = uuid() as fhir_observation_id,
                    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_observation_id),
                    fhir_section_section.entry = create('Reference') as fhir_section_entry_reference,
                    fhir_section_entry_reference.reference = append('urn:uuid:', fhir_observation_id),
                    fhir_section_entry_reference.type = 'Observation' then {
                    // here the following vital sign observation can be used: https://hl7.org/fhir/R4/vitalsigns.html
                        cda_organizer_component_observation -> fhir_observation.meta as fhir_observation_meta,
                            fhir_observation_meta.profile = 'https://build.fhir.org/observation-vitalsigns.html'
                            "VitalObservationMETAtoFHIRIMETA";
                        
                        cda_organizer_component_observation.id -> fhir_observation.identifier
                        "VitalObservationIdtoFHIRId";

                        cda_organizer_component_observation -> fhir_observation.category as fhir_observation_category,
                            fhir_observation_category.coding as fhir_category_coding,
                            fhir_category_coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                            fhir_category_coding.code = 'vital-signs'
                            "VitalObservationtoFHIR";
                        // here the fixed value for the code is vital-signs

                        cda_organizer_component_observation.code -> fhir_observation.code as fhir_observation_code, 
                            fhir_observation_code.coding as fhir_code_coding
                            "VitalObservationCodetoFHIR";
                        // Here we also have a value set which should be used for the codes (SHALL)
                        // we could also do a mapping 
                        // ToDo: remove empty value text 

                        cda_organizer_component_observation.code.translation -> fhir_observation.code.coding as fhir_observation_translation_code
                            "VitalObservationTranslationtoFHIR";
                        // ToDo: add system

                        cda_organizer_component_observation.text.reference.value as observation_text
                        -> fhir_observation.note = create('Annotation') as fhir_note,
                            fhir_note.text = observation_text
                            "VitalObservationTexttoFHIRNote";
                        // No better way to include the reference tag from text in CDA
                        // ToDo clean the string!

                        cda_organizer_component_observation.statusCode as organizer_statusCode then {
                            organizer_statusCode.code as cda_code -> fhir_observation.status = translate(cda_code, '#act-status-2-observation-status' , 'code');
                            } "VitalObservationStatusCodetoFHIR";
                        // We have completed in CDA but we must chose from https://hl7.org/fhir/R4/valueset-observation-status.html, so a mapping is requiered 
                        // completed -> string? 
                            
                        cda_organizer_component_observation.effectiveTime as cda_effectiveTime ->
                            fhir_observation.effective = create('dateTime') as fhir_observation_effective,
                            fhir_observation_effective.extension as fhir_observation_effective_extenstion,
                            fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
                            fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
                            fhir_observation_effective_extenstion_code.value = 'not-applicable'
                             then TSDateTime(cda_effectiveTime, fhir_observation_effective)
                             "VitalObservationEffectiveTimetoFHIREffectiveTime";

                        cda_organizer_component_observation
                             where cda_organizer_component_observation.effectiveTime.exists().not() ->
                             fhir_observation.effective = create('dateTime') as fhir_observation_effective,
                             fhir_observation_effective.value = '1900-01-01',
                             fhir_observation_effective.extension as fhir_observation_effective_extenstion,
                             fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
                             fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
                             fhir_observation_effective_extenstion_code.value = 'not-applicable'
                              "CdaEffectiveTimeExistsNotToFhirObservationEffective";
   
                        //only PQ value possible
                        cda_organizer_component_observation.value as observation_value  -> 
                            fhir_observation.value = create('Quantity') as fhir_observation_value then PQQuantity(observation_value, fhir_observation_value) 
                            "VitalObservationVALUEtoFHIRVALUE";
                        
                        // the subject 
                        cda_organizer_component_observation ->
                            fhir_observation.subject = create('Reference') as fhir_observation_subject_reference,
                            fhir_patient.id as fhir_patient_id,
                            fhir_observation_subject_reference.reference = append('urn:uuid:', fhir_patient_id)
                            "FhirObservationSubject";
                        
                        // represented as a performer
                        cda_organizer_component_observation.performer as observation_performer
                            where cda_organizer_component_observation.performer.exists()
                            then CdaPerformerToFhirObservationPerformer(observation_performer, fhir_observation, fhir_bundle)
                            "CdaObservationPerformerToFhirObservationPerformer";

                        // in the mean time the author is also represented as a performer, since there is no other possible way to display a person in the bundle
                        cda_organizer_component_observation.author as observation_author where $this.assignedAuthor.assignedPerson.exists() ->
                            fhir_bundle.entry as fhir_bundle_entry,
                            fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
                            fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
                            fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
                            fhir_observation.performer = create('Reference') as fhir_composition_author_reference,
                            fhir_composition_author_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
                            fhir_composition_author_reference.type = 'PractitionerRole' then
                            CdaAuthorToFhirPractitionerRole(observation_author, fhir_practitionerRole, fhir_bundle);
                        
                        // represented as a author
                        cda_organizer_component_observation.performer as observation_performer
                            where cda_organizer_component_observation.performer.exists()
                            then CdaPerformerToFhirObservationPerformer(observation_performer, fhir_observation, fhir_bundle)
                            "CdaObservationPerformerToFhirObservationPerformer";

                        // informant can not be mapped with the same meaning... maybe in the notes? 

                        
                    };
                };

                //checking if we have a Serienmessung
                cda_organizer_component.observation as cda_organizer_component_observation where templateId.where(root='1.2.40.0.34.6.0.11.3.100') then {
                
                    cda_organizer_component.observation as cda_organizer_component_observation -> 
                    fhir_bundle.entry as fhir_bundle_entry,
                    fhir_bundle_entry.resource = create('Observation') as fhir_observation,
                    fhir_observation.id = uuid() as fhir_observation_id,
                    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_observation_id),
                    fhir_section_section.entry = create('Reference') as fhir_section_entry_reference,
                    fhir_section_entry_reference.reference = append('urn:uuid:', fhir_observation_id),
                    fhir_section_entry_reference.type = 'Observation' then {
                    // here the following vital sign observation can be used, also for the Serienmessung-Element. In fact we can reuse a lot from the vitalprameters above: https://hl7.org/fhir/R4/vitalsigns.html
                        cda_organizer_component_observation -> fhir_observation.meta as fhir_observation_meta,
                            fhir_observation_meta.profile = 'https://build.fhir.org/observation-vitalsigns.html'
                            "VitalObservationMETAtoFHIRIMETA";
                        
                        cda_organizer_component_observation -> fhir_observation.category as fhir_observation_category,
                            fhir_observation_category.coding as fhir_category_coding,
                            fhir_category_coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
                            fhir_category_coding.code = 'vital-signs'
                            "VitalObservationtoFHIR";
                        // here the fixed value for the code is vital-signs, also as above

                        cda_organizer_component_observation.code -> fhir_observation.code as fhir_observation_code, 
                            fhir_observation_code.coding as fhir_code_coding
                            "VitalObservationCodetoFHIR";

                        cda_organizer_component_observation.code.translation -> fhir_observation.code.coding as fhir_observation_translation_code
                            "VitalObservationTranslationtoFHIR";
                        // For the translations a new code element is being created, here further investigation needed for the system value

                        cda_organizer_component_observation.text.reference.value as observation_text
                        -> fhir_observation.note = create('Annotation') as fhir_note,
                            fhir_note.text = observation_text
                            "VitalObservationTexttoFHIRNote";
                        // No better way to include the reference tag from text in CDA
                        // ToDo clean the string!

                        cda_organizer_component_observation.statusCode as organizer_statusCode then {
                            organizer_statusCode.code as cda_code -> fhir_observation.status = translate(cda_code, '#act-status-2-observation-status' , 'code');
                            } "VitalObservationStatusCodetoFHIR";
                        // here we map the code from the cda to the conceptMap since status has as predefined value set which is used

                            
                        cda_organizer_component_observation.effectiveTime as cda_effectiveTime ->
                            fhir_observation.effective = create('dateTime') as fhir_observation_effective,
                            fhir_observation_effective.extension as fhir_observation_effective_extenstion,
                            fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
                            fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
                            fhir_observation_effective_extenstion_code.value = 'not-applicable'
                            then TSDateTime(cda_effectiveTime, fhir_observation_effective)
                            "VitalObservationEffectiveTimetoFHIREffectiveTime";

                        cda_organizer_component_observation
                            where cda_organizer_component_observation.effectiveTime.exists().not() ->
                            fhir_observation.effective = create('dateTime') as fhir_observation_effective,
                            fhir_observation_effective.value = '1900-01-01',
                            fhir_observation_effective.extension as fhir_observation_effective_extenstion,
                            fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
                            fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
                            fhir_observation_effective_extenstion_code.value = 'not-applicable'
                            "CdaEffectiveTimeExistsNotToFhirObservationEffective";

                        // the PQ value for the Serienmessung is always a nullFlavor, therefor we do not mapp it
                        // cda_organizer_component_observation.value as observation_value  -> 
                            // fhir_observation.value = create('Quantity') as fhir_observation_value then PQQuantity(observation_value, fhir_observation_value) 
                            // "VitalObservationVALUEtoFHIRVALUE";
                        
                        // the subject 
                        cda_organizer_component_observation ->
                            fhir_observation.subject = create('Reference') as fhir_observation_subject_reference,
                            fhir_patient.id as fhir_patient_id,
                            fhir_observation_subject_reference.reference = append('urn:uuid:', fhir_patient_id)
                            "FhirObservationSubject";
                        
                        // represented as a performer
                        cda_organizer_component_observation.performer as observation_performer
                            where cda_organizer_component_observation.performer.exists()
                            then CdaPerformerToFhirObservationPerformer(observation_performer, fhir_observation, fhir_bundle)
                            "CdaObservationPerformerToFhirObservationPerformer";

                        // in the mean time the author is also represented as a performer, since there is no other possible way to display a person in the bundle
                        cda_organizer_component_observation.author as observation_author where $this.assignedAuthor.assignedPerson.exists() ->
                            fhir_bundle.entry as fhir_bundle_entry,
                            fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
                            fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
                            fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
                            fhir_observation.performer = create('Reference') as fhir_composition_author_reference,
                            fhir_composition_author_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
                            fhir_composition_author_reference.type = 'PractitionerRole' then
                            CdaAuthorToFhirPractitionerRole(observation_author, fhir_practitionerRole, fhir_bundle);
                        
                        // represented as a author
                        cda_organizer_component_observation.performer as observation_performer
                            where cda_organizer_component_observation.performer.exists()
                            then CdaPerformerToFhirObservationPerformer(observation_performer, fhir_observation, fhir_bundle)
                            "CdaObservationPerformerToFhirObservationPerformer";

                    
                    };
                };
            };
        };
    };
}

group CdaMessergebnisseToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle) extends CdaSectionToFhirSection {
    // Here the entries are needed to be defined
}
group CdaMedikationslisteToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle) extends CdaSectionToFhirSection {
    // Here the entries are needed to be defined
}
group CdaDokumentierteEinnahmeToFhirSection(cda_section_component_section, fhir_section_section, fhir_bundle) extends CdaSectionToFhirSection {
    // Here the entries are needed to be defined
}

// _________________________ Entry Level Templates   ________________________

group CdaObservationToFhirObservation(source cda_observation : CDAObservation, target fhir_observation : Observation) {
  // observation.id
  cda_observation.id -> fhir_observation.identifier;
  // observation.code
  // to be defined in derived versions of this group
  // observation.text
  // TODO
  // observation.statusCode

}

group CdaLaboratoryObservationToFhirObservation(source cda: ClinicalDocument, source cda_laboratory_observation : CDAObservation, target fhir_observation : Observation, target fhir_practitionerRole: PractitionerRole, target fhir_patient: Patient, target fhir_bundle: Bundle) {
  cda_laboratory_observation ->
    fhir_observation.meta as fhir_observation_meta,
    fhir_observation_meta.profile = 'http://hl7.eu/fhir/laboratory/StructureDefinition/Observation-resultslab-eu-lab'
    "FhirObservationProfile";

  // observation.id
  cda_laboratory_observation.id -> fhir_observation.identifier;

  // fhir_observation.category
  cda_laboratory_observation -> fhir_observation.category as fhir_category,
    fhir_category.coding as fhir_category_coding,
    fhir_category_coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category',
    fhir_category_coding.code = 'laboratory'
    "FhirObservationCategoryCoding";
  // fhir_observation.subject
  cda_laboratory_observation ->
    fhir_observation.subject = create('Reference') as fhir_observation_subject_reference,
    fhir_patient.id as fhir_patient_id,
    fhir_observation_subject_reference.reference = append('urn:uuid:', fhir_patient_id)
    "FhirObservationSubject";

  // observation.code
  cda_laboratory_observation.code -> fhir_observation.code;
  // observation.text
  // TODO
  // observation.statusCode
  cda_laboratory_observation
    where cda_laboratory_observation.value.exists(code='255599008' and codeSystem='2.16.840.1.113883.6.96').not() then {
    cda_laboratory_observation.statusCode as observation_statusCode then {
      observation_statusCode.code as cda_code -> fhir_observation.status = translate(cda_code, '#act-status-2-observation-status' , 'code');
    } "CdaStatusCodeToFhirObservationStatusMapped";
  } "CdaStatusCodeToFhirObservationStatus";
  cda_laboratory_observation
    where cda_laboratory_observation.value.exists(code='255599008' and codeSystem='2.16.840.1.113883.6.96') ->
    fhir_observation.status = 'preliminary',
    fhir_observation.dataAbsentReason as fhir_observation_dataAbsentReason,
    fhir_observation_dataAbsentReason.coding as fhir_observation_dataAbsentReason_coding,
    fhir_observation_dataAbsentReason_coding.code = 'temp-unknown',
    fhir_observation_dataAbsentReason_coding.system = 'http://terminology.hl7.org/CodeSystem/data-absent-reason'
     "CdaIncompleteObservationToFhirObservationStatus";

  // observation.effectiveTime
  cda_laboratory_observation.effectiveTime as cda_effectiveTime -> fhir_observation.effective = create('dateTime') as fhir_observation_effective then TSDateTime(cda_effectiveTime, fhir_observation_effective) "CdaEffectiveTimeToFhirObservationEffective";
  cda_laboratory_observation
    where cda_laboratory_observation.effectiveTime.where(nullFlavor = 'UNK') ->
    fhir_observation.effective = create('dateTime') as fhir_observation_effective,
    fhir_observation_effective.extension as fhir_observation_effective_extenstion,
    fhir_observation_effective_extenstion.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
    fhir_observation_effective_extenstion.value = create('code') as fhir_observation_effective_extenstion_code,
    fhir_observation_effective_extenstion_code.value = 'unknown'
      "CdaEffectiveTimeExistsNotToFhirObservationEffective";

  // observation.value(xsi:type="PQ")
  cda_laboratory_observation.value: PQ as cda_observation_value -> fhir_observation.value = create('Quantity') as fhir_observation_value then PQQuantity(cda_observation_value, fhir_observation_value) "CdaObservationValueToFhirObservationValuePQ";

  // observation.value(xsi:type="IVL_PQ")
  cda_laboratory_observation.value: IVL_PQ as cda_observation_value -> fhir_observation.value = create('Range') as fhir_observation_value then IVLPQRange(cda_observation_value, fhir_observation_value) "CdaObservationValueToFhirObservationValueIVLPQ";

  // observation.value(xsi:type="CD")
  cda_laboratory_observation
    where cda_laboratory_observation.value.exists(code='255599008' and codeSystem='2.16.840.1.113883.6.96').not() then {
    cda_laboratory_observation.value: CD as cda_observation_value -> fhir_observation.value = create('CodeableConcept') as fhir_observation_value then CDCodeableConcept(cda_observation_value, fhir_observation_value);
  } "CdaObservationValueToFhirObservationValueCD";

  // observation.value(xsi:type="ST")
  cda_laboratory_observation.value: ST as cda_observation_value -> fhir_observation.value = create('string') as fhir_observation_value then STstring(cda_observation_value, fhir_observation_value) "CdaObservationValueToFhirObservationValueST";

  // TODO other datatypes
  // // Concept Descriptor
	// cdaObs.value: CD as obsValueCDA -> observation.value = create('CodeableConcept') as value then CDCodeableConcept(obsValueCDA,value) "observationValueCD";
	// // in the case of microbial culture finding with sample report, observation.value element contains result interpretation -> error or correct? is it allowed to use an interpretationCode Element without a value-Element itself?
	// // Interval of Physical Quantities
	// cdaObs.value: IVL_PQ as obsValueCDA -> observation.value = create('Range') as value then IVLPQRange(obsValueCDA, value) "observationValueIVLPQ";
	// // Physical Quantity - not standard conformant, but required for example report
	// cdaObs.value: PQ as obsValueCDA -> observation.value = create('Quantity') as value then PQQuantity(obsValueCDA,value) "observationValuePQ";
	// // Integer
	// cdaObs.value: INT as obsValueCDA -> observation.value = create('integer') as value then INT(obsValueCDA,value) "observationValueINT";
	// // Interval of Integers
	// cdaObs.value: IVL_INT as obsValueCDA -> observation.value = create('Range') as value then IVLINTRange(obsValueCDA,value) "observationValueIVLINT";
	// // Boolean
	// cdaObs.value: BL as obsValueCDA -> observation.value = create('boolean') as value then Boolean(obsValueCDA,value) "observationValueBool";
	// // Coded Value
	// cdaObs.value: CV as obsValueCDA -> observation.value = create('CodeableConcept') as value then CVCodeableConcept(obsValueCDA,value) "observationValueCV";
	// // Time Stamp
	// cdaObs.value: TS as obsValueCDA -> observation.value = create('dateTime') as value then TSDateTime(obsValueCDA,value) "observationValueTS";
	// // Ratio
	// cdaObs.value: RTO as obsValueCDA -> observation.value = create('Ratio') as value then RTORatio(obsValueCDA,value) "observationValueRTO";
	// // Ratio of quantities
	// cdaObs.value: RTO_QTY_QTY as obsValueCDA -> observation.value = create('Ratio') as value then RTOQTYQTYRatio(obsValueCDA,value) "observationValueRTOQTYQTY";
	// // Ratio of physical quantities
	// cdaObs.value: RTO_PQ_PQ as obsValueCDA -> observation.value = create('Ratio') as value then RTOPQPQRatio(obsValueCDA,value) "observationValueRTOPQPQ";

  // observation.interpretationCode
  cda_laboratory_observation.interpretationCode -> fhir_observation.interpretation;

  // observation.performer if existent in observation
  cda_laboratory_observation.performer as cda_laboratory_observation_performer
    where cda_laboratory_observation.performer.exists()
    then CdaPerformerToFhirObservationPerformer(cda_laboratory_observation_performer, fhir_observation, fhir_bundle)
    "CdaObservationPerformerToFhirObservationPerformer";
  // observation.performer if not existent in observation
  cda_laboratory_observation where cda_laboratory_observation.performer.exists().not() then {

    cda where cda.documentationOf[0].serviceEvent.performer.exists() then {
        // ClinicalDocument.documentationOf
        cda.documentationOf first as cda_documentationOf then {
            // ClinicalDocument.documentationOf.serviceEvent
            cda_documentationOf.serviceEvent as cda_documentationOf_serviceEvent then {
                cda_documentationOf_serviceEvent.performer as cda_documentationOf_serviceEvent_performer then {
                    // observation.performer.time - it is assumed that only @value occurs and no interval
                    cda_documentationOf_serviceEvent_performer.time  -> fhir_observation.issued "AAA";
                };
            };
        };
    } "CdaDocumentationOfServiceEventPerformerExists";
    cda ->
        fhir_observation.performer = create('Reference') as fhir_observation_performer_reference,
        fhir_practitionerRole.id as fhir_practitionerRole_id,
        fhir_observation_performer_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
        fhir_observation_performer_reference.type = 'PractitionerRole'
    "CdaObservationPerformerExistsNotRole";

  } "CdaObservationPerformerExistsNot";

  // observation.participant
  // TODO

  // observation.entryRelationship (Comment Entry)
  // TODO

  // observation.entryRelationship (Frühere Ergebnisse)
  // TODO

  // observation.referenceRange
  cda_laboratory_observation.referenceRange as cda_observation_referenceRange then {
    // observation.referenceRange.observationRange
    cda_observation_referenceRange.observationRange as cda_referenceRange_observationRange ->
      fhir_observation.referenceRange as fhir_observation_referenceRange then {
        // observation.referenceRange.observationRange.text
        // TODO how to deal with <reference>-tags
        cda_referenceRange_observationRange.text -> fhir_observation_referenceRange.text;
        // observation.referenceRange.observationRange.value
        cda_referenceRange_observationRange.value as cda_observationRange_value then {
          // observation.referenceRange.observationRange.value.low
          cda_observationRange_value.low -> fhir_observation_referenceRange.low;
          // observation.referenceRange.observationRange.value.high
          cda_observationRange_value.high -> fhir_observation_referenceRange.high;
        };
        // observation.referenceRange.observationRange.interpretationCode (always 'N')
        cda_referenceRange_observationRange.interpretationCode ->
          fhir_observation_referenceRange.type as fhir_referenceRange_type,
          fhir_referenceRange_type.coding as fhir_type_coding,
          fhir_type_coding.system = 'http://terminology.hl7.org/CodeSystem/referencerange-meaning',
          fhir_type_coding.code = 'normal'
          "CdaInterpretationCodeToFhirInterpretationCode";
      };
  };
}

// _________________________ Template Type not specified  ___________________

// Source: https://art-decor.org/ad/#/at-lab-/rules/templates/1.2.40.0.34.6.0.11.9.22/2021-05-26T13:50:41
// Target: http://hl7.org/fhir/practitionerrole.html
//         http://hl7.org/fhir/practitioner.html
group CdaAssignedEntityToFhirPractitionerRole(source cda_assignedEntity : AssignedEntity, target fhir_practitionerRole : PractitionerRole, target fhir_bundle : Bundle){
  cda_assignedEntity ->
    // create the Practitioner
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('Practitioner') as fhir_practitioner,
    fhir_practitioner.id = uuid() as fhir_practitioner_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole.practitioner = create('Reference') as fhir_practitionerRole_practitioner_reference,
    fhir_practitionerRole_practitioner_reference.reference = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole_practitioner_reference.type = 'Practitioner' then {
      // assignedEntity.id
      cda_assignedEntity.id -> fhir_practitionerRole.identifier;
      // assignedEntity.code - TODO here "external" laboratories (performer) could be identified - best place?
      cda_assignedEntity.code -> fhir_practitionerRole.code;
      // assignedEntity.addr
      cda_assignedEntity.addr -> fhir_practitioner.address;
      // assignedEntity.telecom
      cda_assignedEntity.telecom -> fhir_practitioner.telecom;
      // assignedEntity.assignedPerson
      cda_assignedEntity.assignedPerson as cda_assignedPerson then {
        // assignedEntity.assignedPerson.name
        cda_assignedPerson.name -> fhir_practitioner.name;
      };
      // assignedEntity.representedOrganization
      cda_assignedEntity.representedOrganization as cda_representedOrganization ->
        fhir_bundle.entry as fhir_bundle_entry,
        fhir_bundle_entry.resource = create('Organization') as fhir_organization,
        fhir_organization.id = uuid() as fhir_organization_id,
        fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
        fhir_practitionerRole.organization = create('Reference') as fhir_practitionerRole_organization,
        fhir_practitionerRole_organization.reference = append('urn:uuid:', fhir_organization_id),
        fhir_practitionerRole_organization.type = 'Organization' then
        CdaOrganizationCompilationToFhirOrganization(cda_representedOrganization, fhir_organization);
  } "CdaAssignedEntityToFhirPractitionerRole";
}

// Source: https://art-decor.org/ad/#/at-lab-/rules/templates/1.2.40.0.34.6.0.11.9.22/2021-05-26T13:50:41
// Target: http://hl7.org/fhir/practitionerrole.html
//         http://hl7.org/fhir/practitioner.html
group CdaAssociatedEntityToFhirPractitionerRole(source cda_associatedEntity : AssociatedEntity, target fhir_practitionerRole : PractitionerRole, target fhir_bundle : Bundle){
  cda_associatedEntity ->
    // create the Practitioner
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('Practitioner') as fhir_practitioner,
    fhir_practitioner.id = uuid() as fhir_practitioner_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole.practitioner = create('Reference') as fhir_practitionerRole_practitioner_reference,
    fhir_practitionerRole_practitioner_reference.reference = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole_practitioner_reference.type = 'Practitioner' then {
      // associatedEntity.id
      cda_associatedEntity.id -> fhir_practitionerRole.identifier;
      // associatedEntity.addr
      cda_associatedEntity.addr -> fhir_practitioner.address;
      // associatedEntity.telecom
      cda_associatedEntity.telecom -> fhir_practitioner.telecom;
      // associatedEntity.associatedPerson
      cda_associatedEntity.associatedPerson as cda_associatedPerson then {
        // associatedEntity.associatedPerson.name
        cda_associatedPerson.name -> fhir_practitioner.name;
      };
      // associatedEntity.scopingOrganization
      cda_associatedEntity.scopingOrganization as cda_scopingOrganization ->
        fhir_bundle.entry as fhir_bundle_entry,
        fhir_bundle_entry.resource = create('Organization') as fhir_organization,
        fhir_organization.id = uuid() as fhir_organization_id,
        fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
        fhir_practitionerRole.organization = create('Reference') as fhir_practitionerRole_organization,
        fhir_practitionerRole_organization.reference = append('urn:uuid:', fhir_organization_id),
        fhir_practitionerRole_organization.type = 'Organization' then
        CdaOrganizationCompilationToFhirOrganization(cda_scopingOrganization, fhir_organization);
  } "CdaAssociatedEntityToFhirPractitionerRole";
}

group CdaPerformerToFhirObservationPerformer(source cda_performer: Performer, target fhir_observation: Observation, target fhir_bundle: Bundle) {
  // observation.performer.time - it is assumed that only @value occurs and no interval
  cda_performer.time  -> fhir_observation.issued;
  // observation.performer.assignedEntity
  cda_performer.assignedEntity as cda_performer_assignedEntity ->
    // Create a PractitionerRole
    fhir_bundle.entry as fhir_bundle_entry01,
    fhir_bundle_entry01.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry01.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_observation.performer = create('Reference') as fhir_observation_performer_reference,
    fhir_observation_performer_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_observation_performer_reference.type = 'PractitionerRole'
    then CdaAssignedEntityToFhirPractitionerRole(cda_performer_assignedEntity, fhir_practitionerRole, fhir_bundle);
}

// group NarrativeLink(source url, target ext: Extension) {
//   url -> ext.url = 'http://hl7.org/fhir/StructureDefinition/narrativeLink' "url";
//   url -> ext.value = create('url') as value, value.value=url "value";
// }